Release "go" does not exist. Installing it now.
NAME: go
LAST DEPLOYED: Fri Apr 26 11:02:53 2024
NAMESPACE: default
STATUS: pending-install
REVISION: 1
HOOKS:
---
# Source: go-app/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "go-go-app-test-connection"
  labels:
    helm.sh/chart: go-app-0.1.0
    app.kubernetes.io/name: go-app
    app.kubernetes.io/instance: go
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['go-go-app:80']
  restartPolicy: Never
MANIFEST:
---
# Source: go-app/charts/nginx-ingress-controller/templates/controller-networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: go-nginx-ingress-controller
  namespace: "default"
  labels:
    app.kubernetes.io/instance: go
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.10.0
    helm.sh/chart: nginx-ingress-controller-11.1.0
    app.kubernetes.io/component: controller
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: go
      app.kubernetes.io/name: nginx-ingress-controller
      app.kubernetes.io/component: controller
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
        - port: 8443
---
# Source: go-app/charts/nginx-ingress-controller/templates/default-backend-networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: go-nginx-ingress-controller-default-backend
  namespace: "default"
  labels:
    app.kubernetes.io/instance: go
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.10.0
    helm.sh/chart: nginx-ingress-controller-11.1.0
    app.kubernetes.io/component: default-backend
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: go
      app.kubernetes.io/name: nginx-ingress-controller
      app.kubernetes.io/component: default-backend
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
---
# Source: go-app/charts/redis/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: go-redis
  namespace: "default"
  labels:
    app.kubernetes.io/instance: go
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.3
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: go
      app.kubernetes.io/name: redis
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow inbound connections
    - ports:
        - port: 6379
---
# Source: go-app/charts/nginx-ingress-controller/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: go-nginx-ingress-controller
  namespace: "default"
  labels:
    app.kubernetes.io/instance: go
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.10.0
    helm.sh/chart: nginx-ingress-controller-11.1.0
automountServiceAccountToken: false
---
# Source: go-app/charts/redis/templates/master/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: go-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: go
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.3
---
# Source: go-app/charts/redis/templates/replicas/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: go-redis-replica
  namespace: "default"
  labels:
    app.kubernetes.io/instance: go
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.3
---
# Source: go-app/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: go-go-app
  labels:
    helm.sh/chart: go-app-0.1.0
    app.kubernetes.io/name: go-app
    app.kubernetes.io/instance: go
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: go-app/templates/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6eyJkb2NrZXIuaW8iOnsidXNlcm5hbWUiOiJzYXJnc3lhbmdvciIsInBhc3N3b3JkIjoiV2ludWIyNmdMaW4iLCJlbWFpbCI6InNhcmdzeWFuZ29yMTk5MkBnbWFpbC5jb20iLCJhdXRoIjoiYzJGeVozTjVZVzVuYjNJNlYybHVkV0l5Tm1kTWFXND0ifX19
---
# Source: go-app/charts/nginx-ingress-controller/templates/controller-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: go-nginx-ingress-controller
  namespace: "default"
  labels:
    app.kubernetes.io/instance: go
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.10.0
    helm.sh/chart: nginx-ingress-controller-11.1.0
    app.kubernetes.io/component: controller
data:
  allow-snippet-annotations: "false"
---
# Source: go-app/charts/nginx-ingress-controller/templates/default-backend-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: go-nginx-ingress-controller-default-backend
  namespace: "default"
  labels:
    app.kubernetes.io/instance: go
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.25.4
    helm.sh/chart: nginx-ingress-controller-11.1.0
    app.kubernetes.io/component: default-backend
data:
  defaultBackend.conf: |-
    location /healthz {
      return 200;
    }
    
    location / {
      return 404;
    }
---
# Source: go-app/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: go-redis-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/instance: go
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.3
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: go-app/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: go-redis-health
  namespace: "default"
  labels:
    app.kubernetes.io/instance: go
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.3
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: go-app/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: go-redis-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/instance: go
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.3
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
  start-replica.sh: |
    #!/bin/bash

    get_port() {
        hostname="$1"
        type="$2"

        port_var=$(echo "${hostname^^}_SERVICE_PORT_$type" | sed "s/-/_/g")
        port=${!port_var}

        if [ -z "$port" ]; then
            case $type in
                "SENTINEL")
                    echo 26379
                    ;;
                "REDIS")
                    echo 6379
                    ;;
            esac
        else
            echo $port
        fi
    }

    get_full_hostname() {
        hostname="$1"
        full_hostname="${hostname}.${HEADLESS_SERVICE}"
        echo "${full_hostname}"
    }

    REDISPORT=$(get_port "$HOSTNAME" "REDIS")
    HEADLESS_SERVICE="go-redis-headless.default.svc.cluster.local"

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/replica.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi

    echo "" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-port $REDISPORT" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-ip $(get_full_hostname "$HOSTNAME")" >> /opt/bitnami/redis/etc/replica.conf
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--replicaof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: go-app/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: go-go-app
  labels:
    helm.sh/chart: go-app-0.1.0
    app.kubernetes.io/name: go-app
    app.kubernetes.io/instance: go
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
data:
  REDIS_ADDR: "redis:6379"
  test: "1"
---
# Source: go-app/charts/nginx-ingress-controller/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: go-nginx-ingress-controller
  labels:
    app.kubernetes.io/instance: go
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.10.0
    helm.sh/chart: nginx-ingress-controller-11.1.0
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
      - namespaces
    verbs:
      - list
      - watch
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      
      - networking.k8s.io
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - discovery.k8s.io
    resources:
      - endpointslices
    verbs:
      - list
      - watch
      - get
---
# Source: go-app/charts/nginx-ingress-controller/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: go-nginx-ingress-controller
  labels:
    app.kubernetes.io/instance: go
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.10.0
    helm.sh/chart: nginx-ingress-controller-11.1.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: go-nginx-ingress-controller
subjects:
  - kind: ServiceAccount
    name: go-nginx-ingress-controller
    namespace: "default"
---
# Source: go-app/charts/nginx-ingress-controller/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: go-nginx-ingress-controller
  namespace: "default"
  labels:
    app.kubernetes.io/instance: go
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.10.0
    helm.sh/chart: nginx-ingress-controller-11.1.0
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      - ingress-controller-leader
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - discovery.k8s.io
    resources:
      - endpointslices
    verbs:
      - list
      - watch
      - get
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - create
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    resourceNames:
      - ingress-controller-leader
    verbs:
      - get
      - update
---
# Source: go-app/charts/nginx-ingress-controller/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: go-nginx-ingress-controller
  namespace: "default"
  labels:
    app.kubernetes.io/instance: go
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.10.0
    helm.sh/chart: nginx-ingress-controller-11.1.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: go-nginx-ingress-controller
subjects:
  - kind: ServiceAccount
    name: go-nginx-ingress-controller
    namespace: "default"
---
# Source: go-app/charts/nginx-ingress-controller/templates/controller-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: go-nginx-ingress-controller
  namespace: "default"
  labels:
    app.kubernetes.io/instance: go
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.10.0
    helm.sh/chart: nginx-ingress-controller-11.1.0
    app.kubernetes.io/component: controller
spec:
  type: LoadBalancer
  sessionAffinity: None
  externalTrafficPolicy: ""
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
  selector:
    app.kubernetes.io/instance: go
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/component: controller
---
# Source: go-app/charts/nginx-ingress-controller/templates/default-backend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: go-nginx-ingress-controller-default-backend
  namespace: "default"
  labels:
    app.kubernetes.io/instance: go
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.25.4
    helm.sh/chart: nginx-ingress-controller-11.1.0
    app.kubernetes.io/component: default-backend
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/instance: go
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/component: default-backend
---
# Source: go-app/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: go-redis-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: go
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.3
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/instance: go
    app.kubernetes.io/name: redis
---
# Source: go-app/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: go-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: go
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.3
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/instance: go
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: master
---
# Source: go-app/charts/redis/templates/replicas/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: go-redis-replicas
  namespace: "default"
  labels:
    app.kubernetes.io/instance: go
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.3
    app.kubernetes.io/component: replica
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/instance: go
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: replica
---
# Source: go-app/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: go-go-app
  labels:
    helm.sh/chart: go-app-0.1.0
    app.kubernetes.io/name: go-app
    app.kubernetes.io/instance: go
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: go-app
    app.kubernetes.io/instance: go
---
# Source: go-app/charts/nginx-ingress-controller/templates/controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-nginx-ingress-controller
  namespace: "default"
  labels:
    app.kubernetes.io/instance: go
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.10.0
    helm.sh/chart: nginx-ingress-controller-11.1.0
    app.kubernetes.io/component: controller
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: go
      app.kubernetes.io/name: nginx-ingress-controller
      app.kubernetes.io/component: controller
  replicas: 1
  revisionHistoryLimit: 10
  minReadySeconds: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: go
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: nginx-ingress-controller
        app.kubernetes.io/version: 1.10.0
        helm.sh/chart: nginx-ingress-controller-11.1.0
        app.kubernetes.io/component: controller
    spec:
      
      dnsPolicy: ClusterFirst
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: go
                    app.kubernetes.io/name: nginx-ingress-controller
                    app.kubernetes.io/component: controller
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      serviceAccountName: go-nginx-ingress-controller
      terminationGracePeriodSeconds: 60
      initContainers:
        - name: prepare-nginx-folder
          image: docker.io/bitnami/nginx-ingress-controller:1.10.0-debian-12-r6
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash
              cp -r /etc/nginx/* /nginx
              cp -r /etc/ingress-controller/* /ingress-controller
          volumeMounts:
            - name: empty-dir
              mountPath: /nginx
              subPath: app-nginx-dir
            - name: empty-dir
              mountPath: /ingress-controller
              subPath: app-controller-dir
      containers:
        - name: controller
          image: docker.io/bitnami/nginx-ingress-controller:1.10.0-debian-12-r6
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          args:
            - --default-backend-service=$(POD_NAMESPACE)/go-nginx-ingress-controller-default-backend
            - --http-port=8080
            - --https-port=8443
            - --default-server-port=8181
            - --healthz-port=10254
            - --profiler-port=10245
            - --status-port=10246
            - --stream-port=10247
            - --election-id=ingress-controller-leader
            - --controller-class=k8s.io/ingress-nginx
            - --configmap=$(POD_NAMESPACE)/go-nginx-ingress-controller
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          envFrom:
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /healthz
              port: metrics
              scheme: HTTP
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /healthz
              port: metrics
              scheme: HTTP
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 8443
              protocol: TCP
            - name: default-server
              containerPort: 8181
              protocol: TCP
            - name: metrics
              containerPort: 10254
              protocol: TCP
            - name: profiler
              containerPort: 10245
              protocol: TCP
            - name: status
              containerPort: 10246
              protocol: TCP
            - name: stream
              containerPort: 10247
              protocol: TCP
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /etc/nginx
              subPath: app-nginx-dir
            - name: empty-dir
              mountPath: /etc/ingress-controller
              subPath: app-controller-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /tmp/nginx
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /etc/ingress-controller/telemetry
              subPath: app-telemetry-dir
      volumes:
        - name: empty-dir
          emptyDir: {}
---
# Source: go-app/charts/nginx-ingress-controller/templates/default-backend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-nginx-ingress-controller-default-backend
  namespace: "default"
  labels:
    app.kubernetes.io/instance: go
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.25.4
    helm.sh/chart: nginx-ingress-controller-11.1.0
    app.kubernetes.io/component: default-backend
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: go
      app.kubernetes.io/name: nginx-ingress-controller
      app.kubernetes.io/component: default-backend
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: go
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: nginx-ingress-controller
        app.kubernetes.io/version: 1.25.4
        helm.sh/chart: nginx-ingress-controller-11.1.0
        app.kubernetes.io/component: default-backend
    spec:
      
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: go
                    app.kubernetes.io/name: nginx-ingress-controller
                    app.kubernetes.io/component: default-backend
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: go-nginx-ingress-controller
      terminationGracePeriodSeconds: 60
      containers:
        - name: default-backend
          image: docker.io/bitnami/nginx:1.25.4-debian-12-r7
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          args:
          env:
          envFrom:
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 0
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/nginx/tmp
              subPath: app-tmp-dir
            - name: nginx-config-volume
              mountPath: /opt/bitnami/nginx/conf/bitnami/defaultBackend.conf
              subPath: defaultBackend.conf
              readOnly: true
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: nginx-config-volume
          configMap:
            name: go-nginx-ingress-controller-default-backend
            items:
              - key: defaultBackend.conf
                path: defaultBackend.conf
---
# Source: go-app/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-go-app
  labels:
    helm.sh/chart: go-app-0.1.0
    app.kubernetes.io/name: go-app
    app.kubernetes.io/instance: go
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: go-app
      app.kubernetes.io/instance: go
  template:
    metadata:
      labels:
        app.kubernetes.io/name: go-app
        app.kubernetes.io/instance: go
    spec:
      imagePullSecrets:
        - name: registry-secret
      serviceAccountName: go-go-app
      securityContext:
        {}
      containers:
        - name: go-app
          securityContext:
            {}
          image: "sargsyangor/farawaygg/go-app:0.0.1"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
---
# Source: go-app/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: go-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: go
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.3
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: go
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
  serviceName: go-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: go
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.2.4
        helm.sh/chart: redis-19.1.3
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 2e7828699ad52233096bfa24121e14b1969ca49c340a140bd9788554fce8c08e
        checksum/secret: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    spec:
      
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: go-redis-master
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: go
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.2.4-debian-12-r12
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: empty-dir
              mountPath: /opt/bitnami/redis/etc/
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: start-scripts
          configMap:
            name: go-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: go-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: go-redis-configuration
        - name: empty-dir
          emptyDir: {}
        - name: redis-data
          emptyDir: {}
---
# Source: go-app/charts/redis/templates/replicas/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: go-redis-replicas
  namespace: "default"
  labels:
    app.kubernetes.io/instance: go
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.3
    app.kubernetes.io/component: replica
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: go
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: replica
  serviceName: go-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: go
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.2.4
        helm.sh/chart: redis-19.1.3
        app.kubernetes.io/component: replica
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 2e7828699ad52233096bfa24121e14b1969ca49c340a140bd9788554fce8c08e
        checksum/secret: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    spec:
      
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: go-redis-replica
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: go
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: replica
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.2.4-debian-12-r12
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-replica.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: replica
            - name: REDIS_MASTER_HOST
              value: go-redis-master-0.go-redis-headless.default.svc.cluster.local
            - name: REDIS_MASTER_PORT_NUMBER
              value: "6379"
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          startupProbe:
            failureThreshold: 22
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: redis
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local_and_master.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local_and_master.sh 1
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: empty-dir
              mountPath: /opt/bitnami/redis/etc
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: start-scripts
          configMap:
            name: go-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: go-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: go-redis-configuration
        - name: empty-dir
          emptyDir: {}
        - name: redis-data
          emptyDir: {}
---
# Source: go-app/templates/cronjobs.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: go-go-app
  labels:
    app: go-app
spec:
  schedule: "*/2 * * * *" # Make sure to enclose the schedule in quotes
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: go-go-app
            image: curlimages/curl # You may need to change this to an image that includes curl and redis-cli
            command:
            - /bin/sh
            - -c
            - |
              app_health=$(curl -s -o /dev/null -w "%{http_code}" http://localhost)
              if [[ "$app_health" == "200" ]]; then
                  echo "Application is healthy (Status: $app_health): $(curl -s http://localhost)"
              else
                  echo "Application is unhealthy (Status: $app_health)"
              fi
              redis_metrics=$(redis-cli info)
              if [ -n "$redis_metrics" ]; then
                  echo "Redis Metrics:"
                  echo "$redis_metrics"
              else
                  echo "Failed to retrieve Redis metrics. Check Redis connection or configuration."
              fi
          restartPolicy: OnFailure
---
# Source: go-app/charts/nginx-ingress-controller/templates/ingressclass.yaml
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: nginx
  labels:
    app.kubernetes.io/instance: go
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.10.0
    helm.sh/chart: nginx-ingress-controller-11.1.0
    app.kubernetes.io/component: controller
spec:
  controller: k8s.io/ingress-nginx
---
# Source: go-app/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: go-go-app
  labels:
    helm.sh/chart: go-app-0.1.0
    app.kubernetes.io/name: go-app
    app.kubernetes.io/instance: go
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  ingressClassName: nginx
  rules:
    - host: "go-app.local"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: go-go-app
                port:
                  number: 80

NOTES:
1. Get the application URL by running these commands:
  http://go-app.local/
